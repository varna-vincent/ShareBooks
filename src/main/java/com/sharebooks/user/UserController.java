package com.sharebooks.user;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.servlet.view.RedirectView;

import javax.servlet.http.HttpServletRequest;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/register") // Map ONLY GET Requests
    public String register (HttpServletRequest request, @RequestParam String name, @RequestParam String email, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        try {
            User user = new User();
            user.setName(name);
            user.setEmail(email);
            user.setPassword(password);
            user = userRepository.save(user);

            return attemptLogin(request, user, password) ? "dashboard" : "signin";

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return "signin";
        }
    }

    private boolean attemptLogin(HttpServletRequest request, User user, String password) {

        if(user.getPassword().equals(password)) {

            System.out.println("Login Successful");
            request.getSession(true).setAttribute("user", user);
            return true;
        } else return false;
    }

    @PostMapping(path="/login") // Map ONLY GET Requests
    public String login (HttpServletRequest request, @RequestParam String email, @RequestParam String password, Model model) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        try {
            User user =  userRepository.findByEmail(email);
            if(user == null) {
                model.addAttribute("errormsg", "User does not exist");
                return "signin";
            } else if(attemptLogin(request, user, password)) {
                return "dashboard";
            } else {
                model.addAttribute("errormsg", "Credentials do not match");
                return "signin";
            }
//            return (user != null && attemptLogin(request, user, password)) ? new RedirectView("dashboard") : new RedirectView("signin");
        } catch (Exception e) {
            System.out.println(e.getMessage());
            model.addAttribute("errormsg", "Server error: Invalid request");
            return "signin";
        }
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        System.out.println(userRepository);
        return userRepository.findAll();

    }

    @GetMapping("/signin")
    public String showLoginForm() {
        return "signin";
    }

    @GetMapping("/logout")
    public String logout(HttpServletRequest request) {
        request.getSession().removeAttribute("user");
        request.getSession().invalidate();
        return "home";
    }
}
